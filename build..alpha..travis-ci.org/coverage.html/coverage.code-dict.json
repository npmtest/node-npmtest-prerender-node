{"/home/travis/build/npmtest/node-npmtest-prerender-node/test.js":"/* istanbul instrument in package npmtest_prerender_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-prerender-node/lib.npmtest_prerender_node.js":"/* istanbul instrument in package npmtest_prerender_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_prerender_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_prerender_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-prerender-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-prerender-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_prerender_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_prerender_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_prerender_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_prerender_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_prerender_node.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_prerender_node.__dirname +\n                    '/lib.npmtest_prerender_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-prerender-node/prerender-node/index.js":"var request = require('request')\n  , url = require('url')\n  , zlib = require('zlib');\n\nvar prerender = module.exports = function(req, res, next) {\n  if(!prerender.shouldShowPrerenderedPage(req)) return next();\n\n  prerender.beforeRenderFn(req, function(err, cachedRender) {\n\n    if (!err && cachedRender) {\n      if (typeof cachedRender == 'string') {\n        res.writeHead(200, {\n          \"Content-Type\": \"text/html\"\n        });\n        return res.end(cachedRender);\n      } else if (typeof cachedRender == 'object') {\n        res.writeHead(cachedRender.status || 200, {\n          \"Content-Type\": \"text/html\"\n        });\n        return res.end(cachedRender.body || '');\n      }\n    }\n\n    prerender.getPrerenderedPageResponse(req, function(err, prerenderedResponse){\n      prerender.afterRenderFn(err, req, prerenderedResponse);\n\n      if(prerenderedResponse){\n        res.writeHead(prerenderedResponse.statusCode, prerenderedResponse.headers);\n        return res.end(prerenderedResponse.body);\n      } else {\n        next(err);\n      }\n    });\n  });\n};\n\n// googlebot, yahoo, and bingbot are not in this list because\n// we support _escaped_fragment_ and want to ensure people aren't\n// penalized for cloaking.\nprerender.crawlerUserAgents = [\n  // 'googlebot',\n  // 'yahoo',\n  // 'bingbot',\n  'baiduspider',\n  'facebookexternalhit',\n  'twitterbot',\n  'rogerbot',\n  'linkedinbot',\n  'embedly',\n  'quora link preview',\n  'showyoubot',\n  'outbrain',\n  'pinterest/0.',\n  'developers.google.com/+/web/snippet',\n  'slackbot',\n  'vkShare',\n  'W3C_Validator',\n  'redditbot',\n  'Applebot',\n  'WhatsApp',\n  'flipboard',\n  'tumblr',\n  'bitlybot',\n  'SkypeUriPreview',\n  'nuzzel',\n  'Discordbot',\n  'Google Page Speed'\n];\n\n\nprerender.extensionsToIgnore = [\n  '.js',\n  '.css',\n  '.xml',\n  '.less',\n  '.png',\n  '.jpg',\n  '.jpeg',\n  '.gif',\n  '.pdf',\n  '.doc',\n  '.txt',\n  '.ico',\n  '.rss',\n  '.zip',\n  '.mp3',\n  '.rar',\n  '.exe',\n  '.wmv',\n  '.doc',\n  '.avi',\n  '.ppt',\n  '.mpg',\n  '.mpeg',\n  '.tif',\n  '.wav',\n  '.mov',\n  '.psd',\n  '.ai',\n  '.xls',\n  '.mp4',\n  '.m4a',\n  '.swf',\n  '.dat',\n  '.dmg',\n  '.iso',\n  '.flv',\n  '.m4v',\n  '.torrent',\n  '.woff',\n  '.ttf',\n  '.svg'\n];\n\n\nprerender.whitelisted = function(whitelist) {\n  prerender.whitelist = typeof whitelist === 'string' ? [whitelist] : whitelist;\n  return this;\n};\n\n\nprerender.blacklisted = function(blacklist) {\n  prerender.blacklist = typeof blacklist === 'string' ? [blacklist] : blacklist;\n  return this;\n};\n\n\nprerender.shouldShowPrerenderedPage = function(req) {\n  var userAgent = req.headers['user-agent']\n    , bufferAgent = req.headers['x-bufferbot']\n    , isRequestingPrerenderedPage = false;\n\n  if(!userAgent) return false;\n  if(req.method != 'GET' && req.method != 'HEAD') return false;\n\n  //if it contains _escaped_fragment_, show prerendered page\n  var parsedQuery = url.parse(req.url, true).query;\n  if(parsedQuery && parsedQuery['_escaped_fragment_'] !== undefined) isRequestingPrerenderedPage = true;\n\n  //if it is a bot...show prerendered page\n  if(prerender.crawlerUserAgents.some(function(crawlerUserAgent){ return userAgent.toLowerCase().indexOf(crawlerUserAgent.toLowerCase()) !== -1;})) isRequestingPrerenderedPage = true;\n\n  //if it is BufferBot...show prerendered page\n  if(bufferAgent) isRequestingPrerenderedPage = true;\n\n  //if it is a bot and is requesting a resource...dont prerender\n  if(prerender.extensionsToIgnore.some(function(extension){return req.url.toLowerCase().indexOf(extension) !== -1;})) return false;\n\n  //if it is a bot and not requesting a resource and is not whitelisted...dont prerender\n  if(Array.isArray(this.whitelist) && this.whitelist.every(function(whitelisted){return (new RegExp(whitelisted)).test(req.url) === false;})) return false;\n\n  //if it is a bot and not requesting a resource and is not blacklisted(url or referer)...dont prerender\n  if(Array.isArray(this.blacklist) && this.blacklist.some(function(blacklisted){\n    var blacklistedUrl = false\n      , blacklistedReferer = false\n      , regex = new RegExp(blacklisted);\n\n    blacklistedUrl = regex.test(req.url) === true;\n    if(req.headers['referer']) blacklistedReferer = regex.test(req.headers['referer']) === true;\n\n    return blacklistedUrl || blacklistedReferer;\n  })) return false;\n\n  return isRequestingPrerenderedPage;\n};\n\n\nprerender.prerenderServerRequestOptions = {};\n\nprerender.getPrerenderedPageResponse = function(req, callback) {\n  var options = {\n    uri: url.parse(prerender.buildApiUrl(req)),\n    followRedirect: false,\n    headers: {}\n  };\n  for (var attrname in this.prerenderServerRequestOptions) { options[attrname] = this.prerenderServerRequestOptions[attrname]; }\n  if (this.forwardHeaders === true) {\n    Object.keys(req.headers).forEach(function(h) {\n      // Forwarding the host header can cause issues with server platforms that require it to match the URL\n      if (h == 'host') {\n        return;\n      }\n      options.headers[h] = req.headers[h];\n    });\n  }\n  options.headers['User-Agent'] = req.headers['user-agent'];\n  options.headers['Accept-Encoding'] = 'gzip';\n  if(this.prerenderToken || process.env.PRERENDER_TOKEN) {\n    options.headers['X-Prerender-Token'] = this.prerenderToken || process.env.PRERENDER_TOKEN;\n  }\n\n  request.get(options).on('response', function(response) {\n    if(response.headers['content-encoding'] && response.headers['content-encoding'] === 'gzip') {\n      prerender.gunzipResponse(response, callback);\n    } else {\n      prerender.plainResponse(response, callback);\n    }\n  }).on('error', function(err) {\n    callback(err);\n  });\n};\n\nprerender.gunzipResponse = function(response, callback) {\n  var gunzip = zlib.createGunzip()\n    , content = '';\n\n  gunzip.on('data', function(chunk) {\n    content += chunk;\n  });\n  gunzip.on('end', function() {\n    response.body = content;\n    delete response.headers['content-encoding'];\n    delete response.headers['content-length'];\n    callback(null, response);\n  });\n  gunzip.on('error', function(err){\n    callback(err);\n  });\n\n  response.pipe(gunzip);\n};\n\nprerender.plainResponse = function(response, callback) {\n  var content = '';\n\n  response.on('data', function(chunk) {\n    content += chunk;\n  });\n  response.on('end', function() {\n    response.body = content;\n    callback(null, response);\n  });\n};\n\n\nprerender.buildApiUrl = function(req) {\n  var prerenderUrl = prerender.getPrerenderServiceUrl();\n  var forwardSlash = prerenderUrl.indexOf('/', prerenderUrl.length - 1) !== -1 ? '' : '/';\n\n  var protocol = req.connection.encrypted ? \"https\" : \"http\";\n  if (req.headers['cf-visitor']) {\n    var match = req.headers['cf-visitor'].match(/\"scheme\":\"(http|https)\"/);\n    if (match) protocol = match[1];\n  }\n  if (req.headers['x-forwarded-proto']) {\n    protocol = req.headers['x-forwarded-proto'].split(',')[0];\n  }\n  if (this.protocol) {\n    protocol = this.protocol;\n  }\n  var fullUrl = protocol + \"://\" + (this.host || req.headers['x-forwarded-host'] || req.headers['host']) + req.url;\n  return prerenderUrl + forwardSlash + fullUrl;\n};\n\nprerender.getPrerenderServiceUrl = function() {\n  return this.prerenderServiceUrl || process.env.PRERENDER_SERVICE_URL || 'http://service.prerender.io/';\n};\n\nprerender.beforeRenderFn = function(req, done) {\n  if (!this.beforeRender) return done();\n\n  return this.beforeRender(req, done);\n};\n\n\nprerender.afterRenderFn = function(err, req, prerender_res) {\n  if (!this.afterRender) return;\n\n  this.afterRender(err, req, prerender_res);\n};\n\n\nprerender.set = function(name, value) {\n  this[name] = value;\n  return this;\n};\n"}